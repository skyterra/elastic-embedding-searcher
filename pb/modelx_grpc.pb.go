// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: modelx.proto

package modelx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelxClient is the client API for Modelx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelxClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongReply, error)
	// generate embedding vector for passed sentence.
	GenEmbedding(ctx context.Context, in *EmbeddingRequest, opts ...grpc.CallOption) (*EmbeddingReply, error)
	// bulk generate embedding vectors.
	GenEmbeddingList(ctx context.Context, in *EmbeddingListRequest, opts ...grpc.CallOption) (*EmbeddingListReply, error)
	// calc similarity score for sentence.
	CalcSimilarityScore(ctx context.Context, in *SimilarityRequest, opts ...grpc.CallOption) (*SimilarityReply, error)
	// extract keywords from input.
	ExtractKeywords(ctx context.Context, in *ExtractKeywordsRequest, opts ...grpc.CallOption) (*ExtractKeywordsReply, error)
}

type modelxClient struct {
	cc grpc.ClientConnInterface
}

func NewModelxClient(cc grpc.ClientConnInterface) ModelxClient {
	return &modelxClient{cc}
}

func (c *modelxClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongReply, error) {
	out := new(PongReply)
	err := c.cc.Invoke(ctx, "/model.Modelx/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelxClient) GenEmbedding(ctx context.Context, in *EmbeddingRequest, opts ...grpc.CallOption) (*EmbeddingReply, error) {
	out := new(EmbeddingReply)
	err := c.cc.Invoke(ctx, "/model.Modelx/GenEmbedding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelxClient) GenEmbeddingList(ctx context.Context, in *EmbeddingListRequest, opts ...grpc.CallOption) (*EmbeddingListReply, error) {
	out := new(EmbeddingListReply)
	err := c.cc.Invoke(ctx, "/model.Modelx/GenEmbeddingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelxClient) CalcSimilarityScore(ctx context.Context, in *SimilarityRequest, opts ...grpc.CallOption) (*SimilarityReply, error) {
	out := new(SimilarityReply)
	err := c.cc.Invoke(ctx, "/model.Modelx/CalcSimilarityScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelxClient) ExtractKeywords(ctx context.Context, in *ExtractKeywordsRequest, opts ...grpc.CallOption) (*ExtractKeywordsReply, error) {
	out := new(ExtractKeywordsReply)
	err := c.cc.Invoke(ctx, "/model.Modelx/ExtractKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelxServer is the server API for Modelx service.
// All implementations must embed UnimplementedModelxServer
// for forward compatibility
type ModelxServer interface {
	Ping(context.Context, *PingRequest) (*PongReply, error)
	// generate embedding vector for passed sentence.
	GenEmbedding(context.Context, *EmbeddingRequest) (*EmbeddingReply, error)
	// bulk generate embedding vectors.
	GenEmbeddingList(context.Context, *EmbeddingListRequest) (*EmbeddingListReply, error)
	// calc similarity score for sentence.
	CalcSimilarityScore(context.Context, *SimilarityRequest) (*SimilarityReply, error)
	// extract keywords from input.
	ExtractKeywords(context.Context, *ExtractKeywordsRequest) (*ExtractKeywordsReply, error)
	mustEmbedUnimplementedModelxServer()
}

// UnimplementedModelxServer must be embedded to have forward compatible implementations.
type UnimplementedModelxServer struct {
}

func (UnimplementedModelxServer) Ping(context.Context, *PingRequest) (*PongReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedModelxServer) GenEmbedding(context.Context, *EmbeddingRequest) (*EmbeddingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenEmbedding not implemented")
}
func (UnimplementedModelxServer) GenEmbeddingList(context.Context, *EmbeddingListRequest) (*EmbeddingListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenEmbeddingList not implemented")
}
func (UnimplementedModelxServer) CalcSimilarityScore(context.Context, *SimilarityRequest) (*SimilarityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcSimilarityScore not implemented")
}
func (UnimplementedModelxServer) ExtractKeywords(context.Context, *ExtractKeywordsRequest) (*ExtractKeywordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractKeywords not implemented")
}
func (UnimplementedModelxServer) mustEmbedUnimplementedModelxServer() {}

// UnsafeModelxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelxServer will
// result in compilation errors.
type UnsafeModelxServer interface {
	mustEmbedUnimplementedModelxServer()
}

func RegisterModelxServer(s grpc.ServiceRegistrar, srv ModelxServer) {
	s.RegisterService(&Modelx_ServiceDesc, srv)
}

func _Modelx_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelxServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Modelx/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelxServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelx_GenEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelxServer).GenEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Modelx/GenEmbedding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelxServer).GenEmbedding(ctx, req.(*EmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelx_GenEmbeddingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelxServer).GenEmbeddingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Modelx/GenEmbeddingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelxServer).GenEmbeddingList(ctx, req.(*EmbeddingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelx_CalcSimilarityScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelxServer).CalcSimilarityScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Modelx/CalcSimilarityScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelxServer).CalcSimilarityScore(ctx, req.(*SimilarityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Modelx_ExtractKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelxServer).ExtractKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Modelx/ExtractKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelxServer).ExtractKeywords(ctx, req.(*ExtractKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Modelx_ServiceDesc is the grpc.ServiceDesc for Modelx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Modelx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Modelx",
	HandlerType: (*ModelxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Modelx_Ping_Handler,
		},
		{
			MethodName: "GenEmbedding",
			Handler:    _Modelx_GenEmbedding_Handler,
		},
		{
			MethodName: "GenEmbeddingList",
			Handler:    _Modelx_GenEmbeddingList_Handler,
		},
		{
			MethodName: "CalcSimilarityScore",
			Handler:    _Modelx_CalcSimilarityScore_Handler,
		},
		{
			MethodName: "ExtractKeywords",
			Handler:    _Modelx_ExtractKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modelx.proto",
}
