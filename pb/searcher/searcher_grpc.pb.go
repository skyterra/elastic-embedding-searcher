// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: searcher.proto

package searcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElasticEmbeddingSearcherApiClient is the client API for ElasticEmbeddingSearcherApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElasticEmbeddingSearcherApiClient interface {
	// health check.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// indexes csv file data into elasticsearch.
	IndexCsvFile(ctx context.Context, in *IndexCsvRequest, opts ...grpc.CallOption) (*IndexCsvResponse, error)
	// query base on semantic search.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type elasticEmbeddingSearcherApiClient struct {
	cc grpc.ClientConnInterface
}

func NewElasticEmbeddingSearcherApiClient(cc grpc.ClientConnInterface) ElasticEmbeddingSearcherApiClient {
	return &elasticEmbeddingSearcherApiClient{cc}
}

func (c *elasticEmbeddingSearcherApiClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/proto.searcher.ElasticEmbeddingSearcherApi/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticEmbeddingSearcherApiClient) IndexCsvFile(ctx context.Context, in *IndexCsvRequest, opts ...grpc.CallOption) (*IndexCsvResponse, error) {
	out := new(IndexCsvResponse)
	err := c.cc.Invoke(ctx, "/proto.searcher.ElasticEmbeddingSearcherApi/IndexCsvFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elasticEmbeddingSearcherApiClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/proto.searcher.ElasticEmbeddingSearcherApi/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElasticEmbeddingSearcherApiServer is the server API for ElasticEmbeddingSearcherApi service.
// All implementations must embed UnimplementedElasticEmbeddingSearcherApiServer
// for forward compatibility
type ElasticEmbeddingSearcherApiServer interface {
	// health check.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// indexes csv file data into elasticsearch.
	IndexCsvFile(context.Context, *IndexCsvRequest) (*IndexCsvResponse, error)
	// query base on semantic search.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	mustEmbedUnimplementedElasticEmbeddingSearcherApiServer()
}

// UnimplementedElasticEmbeddingSearcherApiServer must be embedded to have forward compatible implementations.
type UnimplementedElasticEmbeddingSearcherApiServer struct {
}

func (UnimplementedElasticEmbeddingSearcherApiServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedElasticEmbeddingSearcherApiServer) IndexCsvFile(context.Context, *IndexCsvRequest) (*IndexCsvResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexCsvFile not implemented")
}
func (UnimplementedElasticEmbeddingSearcherApiServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedElasticEmbeddingSearcherApiServer) mustEmbedUnimplementedElasticEmbeddingSearcherApiServer() {
}

// UnsafeElasticEmbeddingSearcherApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElasticEmbeddingSearcherApiServer will
// result in compilation errors.
type UnsafeElasticEmbeddingSearcherApiServer interface {
	mustEmbedUnimplementedElasticEmbeddingSearcherApiServer()
}

func RegisterElasticEmbeddingSearcherApiServer(s grpc.ServiceRegistrar, srv ElasticEmbeddingSearcherApiServer) {
	s.RegisterService(&ElasticEmbeddingSearcherApi_ServiceDesc, srv)
}

func _ElasticEmbeddingSearcherApi_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticEmbeddingSearcherApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.searcher.ElasticEmbeddingSearcherApi/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticEmbeddingSearcherApiServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticEmbeddingSearcherApi_IndexCsvFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexCsvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticEmbeddingSearcherApiServer).IndexCsvFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.searcher.ElasticEmbeddingSearcherApi/IndexCsvFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticEmbeddingSearcherApiServer).IndexCsvFile(ctx, req.(*IndexCsvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElasticEmbeddingSearcherApi_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElasticEmbeddingSearcherApiServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.searcher.ElasticEmbeddingSearcherApi/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElasticEmbeddingSearcherApiServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ElasticEmbeddingSearcherApi_ServiceDesc is the grpc.ServiceDesc for ElasticEmbeddingSearcherApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElasticEmbeddingSearcherApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.searcher.ElasticEmbeddingSearcherApi",
	HandlerType: (*ElasticEmbeddingSearcherApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ElasticEmbeddingSearcherApi_Ping_Handler,
		},
		{
			MethodName: "IndexCsvFile",
			Handler:    _ElasticEmbeddingSearcherApi_IndexCsvFile_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _ElasticEmbeddingSearcherApi_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "searcher.proto",
}
